#!/usr/bin/env bash

platform="$BUILDKITE_PLUGIN_UM_VERSION_VALIDATOR_PLATFORM"
base_ref="$BUILDKITE_PLUGIN_UM_VERSION_VALIDATOR_BASE_BRANCH"
head_ref="$BUILDKITE_PLUGIN_UM_VERSION_VALIDATOR_CURRENT_BRANCH"
pr_labels="$BUILDKITE_PULL_REQUEST_LABELS"

E_VERSION_CODE_MISSING_ALPHA=101
E_VERSION_SMALLER_THAN_BEFORE=102
E_VERSION_NEEDS_INCREMENTED=103
E_VERSION_ALREADY_RELEASED=104
E_VERSION_NOT_FOUND=105
E_VERSION_CANNOT_MOVE_FROM_RELEASE_TO_RELEASE=106

function get_version_android() {
    local ref=$1
    local file_path=$2

    if git cat-file -e "${ref}:${file_path}/build.gradle" 2>/dev/null; then
        git show "${ref}:${file_path}/build.gradle" | grep versionName | tr \" "\n" | grep -e "\."
    else
        echo "UNDEFINED"
    fi
}

function get_version_ios() {
    local ref=$1
    local podspec=$2
    
    if git cat-file -e "$ref:${podspec}" 2>/dev/null; then
        git show "${ref}:${podspec}" | grep -m 1 s.version | tr \' "\n" | tail -2 | head -1
    else
        echo "UNDEFINED"
    fi
}

function get_version_react() {
    local ref=$1
    local file_path=$2
    
    if git cat-file -e "$ref:${file_path}/package.json" 2>/dev/null; then
        git show "${ref}:${file_path}/package.json" | grep version | tr \" "\n" | grep -e "\."
    else
        echo "UNDEFINED"
    fi
}

function check_skip_alpha_label() {
    local pr_labels=$1
    local skip_label='skip-alpha'

    if [[ "$pr_labels" == *"$skip_label"* ]]; then
        echo true
    else
        echo false
    fi
}

function ios_pod_spec() {
    local ios_platform=$1

    if git cat-file -e "${ref}:fanbrew.json" 2>/dev/null; then
        git show "${ref}:fanbrew.json" | jq -r "(.platforms.ios.${ios_platform}.podspec)?"
    else
        echo "UNDEFINED"
    fi
}

function get_max_version() {
    local version_old
    local version_new
    local allow_skip_alpha_version
    
    allow_skip_alpha_version=$(check_skip_alpha_label "$pr_labels")
    ios_pod_spec_contract=$(ios_pod_spec "contract")
    ios_pod_spec_library=$(ios_pod_spec "library")

    echo "--- :mag: Checking UM Version Code"
    echo "platform: $platform"
    echo "base_branch: $base_ref"
    echo "pr_branch: $head_ref"
    echo "pr_labels: $pr_labels"
    echo "allow_skip_alpha_version: $allow_skip_alpha_version"
    echo "ios_pod_spec_contract: $ios_pod_spec_contract"
    echo "ios_pod_spec_library: $ios_pod_spec_library"

    case $platform in 
        "android-contract")
            version_old=$(get_version_android "origin/$base_ref" "android/contract")
            version_new=$(get_version_android "origin/$head_ref" "android/contract") ;;
        
        "android-library")
            version_old=$(get_version_android "origin/$base_ref" "android/library")
            version_new=$(get_version_android "origin/$head_ref" "android/library") ;;

        "ios-contract")
            version_old=$(get_version_ios "origin/$base_ref" "$ios_pod_spec_contract")
            version_new=$(get_version_ios "origin/$head_ref" "$ios_pod_spec_contract") ;;

        "ios-library")
            version_old=$(get_version_ios "origin/$base_ref" "$ios_pod_spec_library")
            version_new=$(get_version_ios "origin/$head_ref" "$ios_pod_spec_library") ;;

        "react-contract")
            version_old=$(get_version_react "origin/$base_ref" "react/contract")
            version_new=$(get_version_react "origin/$head_ref" "react/contract") ;;
        
        "react-library")
            version_old=$(get_version_react "origin/$base_ref" "react/library")
            version_new=$(get_version_react "origin/$head_ref" "react/library") ;;
    esac

    echo "----------------------------------"
    echo "base_branch: $base_ref v: $version_old"
    echo "pr_branch: $head_ref v: $version_new"

    m_skip_as_not_merging_into_main=false
    if [ "$base_ref" != "main" ]; then
        if [ "$base_ref" = "main~1" ] ; then
            m_skip_as_not_merging_into_main=false
        else 
            m_skip_as_not_merging_into_main=true
        fi
    fi

    if [ "$m_skip_as_not_merging_into_main" = "true" ]; then
        buildkite-agent annotate "($platform) - Not merging into main branch, no tests will run and no publish will happen." --style 'info' --context "$platform-max-versions"
        exit 0
    fi

    alpha_zero=$(grep -ce "-alpha\.0" <<< "$version_new")
    if test "$alpha_zero" -eq 1 ; then
        buildkite-agent annotate "($platform) - x.x.x-alpha.0 version detected, assuming base project files and skipping test & publish steps" --style 'info' --context "$platform-max-versions"
        exit 0
    fi

    if [ "$version_new" = "UNDEFINED" ] ; then
        buildkite-agent annotate "($platform) - Could not find version code on $head_ref (new branch).  Have you deleted the identifying file for your platform?" --style 'error' --context "$platform-max-versions"
        echo "--- :no_entry: Test failed: version not found on $head_ref."
        exit $E_VERSION_NOT_FOUND
    elif [ "$version_old" = "$version_new" ] ; then
        buildkite-agent annotate "($platform) - Test required as files changed, but no publish will happen as version code has not changed." --style 'info' --context "$platform-max-versions"
        echo "--- :left_right_arrow: version not change. No publish will happen."
        buildkite-agent meta-data set 'skip-test' 'false'
        exit 0
    fi

    if [[ ! "$allow_skip_alpha_version" == "true" ]]; then
        old_is_release=$(grep -ce "alpha" <<< "$version_old")
        new_is_release=$(grep -ce "alpha" <<< "$version_new")
        if [[ "$old_is_release" -eq 0 && "$new_is_release" -eq 0  ]]; then
            buildkite-agent annotate "($platform) - You cannot move from a release to another release, you must publish an alpha in between." --style 'error' --context "$platform-max-versions"
            echo "--- :no_entry: you must publish an alpha in between."
            exit $E_VERSION_CANNOT_MOVE_FROM_RELEASE_TO_RELEASE
        fi
    fi

    # echo out variables to file 'versions.txt'
    if [ "$version_old" = "UNDEFINED" ]
        then echo "0.0" > versions.txt
        else echo "$version_old" > versions.txt
    fi
    echo "$version_new" >> versions.txt
    # if we can find our new within old
    # ie, new -> 1.2.3              is contained within
    #     old -> 1.2.3-alpha.x
    if [ $(grep -ce "${version_new}" <<< "${version_old}") -gt 0 ] 
        # grab first entry
        then version_max=$(sort -V versions.txt | head -1)
        # grab last entry
        else version_max=$(sort -V versions.txt | tail -1)
    fi

    echo "Maximum version between branches: $version_max"

    if [ "$version_max" != "$version_new" ] ; then 
        echo "--- :no_entry: Test failed: version $version_new is smaller than $base_ref."
        buildkite-agent annotate "($platform) - Your VersionCode is smaller than origin/$base_ref" --style 'error' --context "$platform-max-versions"
        exit $E_VERSION_SMALLER_THAN_BEFORE
    else
        echo "--- :white_check_mark: Test passed: version $version_new is valid."        
    fi

    buildkite-agent annotate "($platform) - Test and publish required" --style 'info' --context "$platform-max-versions"
    buildkite-agent meta-data set 'skip-test' 'false'
    buildkite-agent meta-data set 'skip-publish' 'false'
}

get_max_version